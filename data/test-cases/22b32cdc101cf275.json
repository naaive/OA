{"uid":"22b32cdc101cf275","name":"test_swap_eth_to_usdt","fullName":"tests.agent_trajectory.asset_management#test_swap_eth_to_usdt","historyId":"7874d2d5c6ca6245d9799c70e22647dc","time":{"start":1730343399089,"stop":1730343400790,"duration":1701},"status":"failed","statusMessage":"AssertionError: The on_tool_end event did not occur in test_swap_eth_to_usdt\nassert 0 > 0","statusTrace":"asset_management_agent = AgentExecutor(verbose=True, agent=RunnableMultiActionAgent(runnable=RunnableAssign(mapper={\n  agent_scratchpad: Runnab...rg=[], stream_runnable=True), tools=[SwapExecutor(), TransferExecutor(), TokenBalanceExecutor(), NFTBalanceExecutor()])\n\n    @pytest.mark.asyncio\n    async def test_swap_eth_to_usdt(asset_management_agent):\n        events = asset_management_agent.astream_events({\"messages\": [HumanMessage(content=\"Can you swap 20 eth to usdt ?\", name=\"human\")]}, version=\"v1\")\n    \n        on_tool_end_count = 0\n    \n        async for event in events:\n            if event[\"event\"] == \"on_tool_end\":\n                on_tool_end_count += 1\n                event_data_input_ = event[\"data\"][\"input\"]\n                assert event[\"name\"] == \"SwapExecutor\"\n                assert event_data_input_[\"from_token\"] == \"ETH\"\n                assert event_data_input_[\"to_token\"] == \"USDT\"\n                assert event_data_input_[\"amount\"] == \"20\"\n    \n>       assert on_tool_end_count > 0, \"The on_tool_end event did not occur in test_swap_eth_to_usdt\"\nE       AssertionError: The on_tool_end event did not occur in test_swap_eth_to_usdt\nE       assert 0 > 0\n\nagent_trajectory/asset_management.py:33: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1730343397439,"stop":1730343397439,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"asset_management_agent","time":{"start":1730343397439,"stop":1730343399069,"duration":1630},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1730343399069,"stop":1730343399070,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: The on_tool_end event did not occur in test_swap_eth_to_usdt\nassert 0 > 0","statusTrace":"asset_management_agent = AgentExecutor(verbose=True, agent=RunnableMultiActionAgent(runnable=RunnableAssign(mapper={\n  agent_scratchpad: Runnab...rg=[], stream_runnable=True), tools=[SwapExecutor(), TransferExecutor(), TokenBalanceExecutor(), NFTBalanceExecutor()])\n\n    @pytest.mark.asyncio\n    async def test_swap_eth_to_usdt(asset_management_agent):\n        events = asset_management_agent.astream_events({\"messages\": [HumanMessage(content=\"Can you swap 20 eth to usdt ?\", name=\"human\")]}, version=\"v1\")\n    \n        on_tool_end_count = 0\n    \n        async for event in events:\n            if event[\"event\"] == \"on_tool_end\":\n                on_tool_end_count += 1\n                event_data_input_ = event[\"data\"][\"input\"]\n                assert event[\"name\"] == \"SwapExecutor\"\n                assert event_data_input_[\"from_token\"] == \"ETH\"\n                assert event_data_input_[\"to_token\"] == \"USDT\"\n                assert event_data_input_[\"amount\"] == \"20\"\n    \n>       assert on_tool_end_count > 0, \"The on_tool_end event did not occur in test_swap_eth_to_usdt\"\nE       AssertionError: The on_tool_end event did not occur in test_swap_eth_to_usdt\nE       assert 0 > 0\n\nagent_trajectory/asset_management.py:33: AssertionError","steps":[],"attachments":[{"uid":"2c3ccce2f8592011","name":"stdout","source":"2c3ccce2f8592011.txt","type":"text/plain","size":269},{"uid":"ad5452949066a78e","name":"stderr","source":"ad5452949066a78e.txt","type":"text/plain","size":130}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1730343400794,"stop":1730343400795,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1730343400795,"stop":1730343400795,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1730343400795,"stop":1730343400795,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1730343400795,"stop":1730343400795,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"asyncio"},{"name":"parentSuite","value":"tests.agent_trajectory"},{"name":"suite","value":"asset_management"},{"name":"host","value":"fv-az1766-28"},{"name":"thread","value":"3555-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.agent_trajectory.asset_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["asyncio"]},"source":"22b32cdc101cf275.json","parameterValues":[]}