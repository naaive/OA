{"uid":"364776f269d48ee1","name":"test_query_social_activities","fullName":"tests.agent_trajectory.feed_explore#test_query_social_activities","historyId":"04b2866c6fb2fc7e75901aee510b0fcf","time":{"start":1730343399148,"stop":1730343403553,"duration":4405},"status":"failed","statusMessage":"AssertionError: assert 'FeedSourceExecutor' == 'FeedExecutor'\n  \n  - FeedExecutor\n  + FeedSourceExecutor\n  ?     ++++++","statusTrace":"feed_explorer_agent = AgentExecutor(verbose=True, agent=RunnableMultiActionAgent(runnable=RunnableAssign(mapper={\n  agent_scratchpad: Runnab...ys_arg=[], stream_runnable=True), tools=[FeedExecutor(), FeedSourceExecutor(), DeFiExecutor(), TelegramNewsExecutor()])\n\n    @pytest.mark.asyncio\n    async def test_query_social_activities(feed_explorer_agent):\n        events = feed_explorer_agent.astream_events(\n            {\"messages\": [HumanMessage(content=\"What are the recent activities for vitalik.eth?\", name=\"human\")]}, version=\"v1\"\n        )\n    \n        tool_end_count = 0\n        async for event in events:\n            if event[\"event\"] == \"on_tool_end\":\n                tool_end_count += 1\n                event_data_input_ = event[\"data\"][\"input\"]\n>               assert event[\"name\"] == \"FeedExecutor\"\nE               AssertionError: assert 'FeedSourceExecutor' == 'FeedExecutor'\nE                 \nE                 - FeedExecutor\nE                 + FeedSourceExecutor\nE                 ?     ++++++\n\nagent_trajectory/feed_explore.py:48: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1730343397454,"stop":1730343397455,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"feed_explorer_agent","time":{"start":1730343397455,"stop":1730343399146,"duration":1691},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1730343399146,"stop":1730343399147,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 'FeedSourceExecutor' == 'FeedExecutor'\n  \n  - FeedExecutor\n  + FeedSourceExecutor\n  ?     ++++++","statusTrace":"feed_explorer_agent = AgentExecutor(verbose=True, agent=RunnableMultiActionAgent(runnable=RunnableAssign(mapper={\n  agent_scratchpad: Runnab...ys_arg=[], stream_runnable=True), tools=[FeedExecutor(), FeedSourceExecutor(), DeFiExecutor(), TelegramNewsExecutor()])\n\n    @pytest.mark.asyncio\n    async def test_query_social_activities(feed_explorer_agent):\n        events = feed_explorer_agent.astream_events(\n            {\"messages\": [HumanMessage(content=\"What are the recent activities for vitalik.eth?\", name=\"human\")]}, version=\"v1\"\n        )\n    \n        tool_end_count = 0\n        async for event in events:\n            if event[\"event\"] == \"on_tool_end\":\n                tool_end_count += 1\n                event_data_input_ = event[\"data\"][\"input\"]\n>               assert event[\"name\"] == \"FeedExecutor\"\nE               AssertionError: assert 'FeedSourceExecutor' == 'FeedExecutor'\nE                 \nE                 - FeedExecutor\nE                 + FeedSourceExecutor\nE                 ?     ++++++\n\nagent_trajectory/feed_explore.py:48: AssertionError","steps":[],"attachments":[{"uid":"119e180f37a2fbb8","name":"stdout","source":"119e180f37a2fbb8.txt","type":"text/plain","size":30708},{"uid":"1eb4415e859b8126","name":"stderr","source":"1eb4415e859b8126.txt","type":"text/plain","size":479}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1730343403558,"stop":1730343403558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1730343403558,"stop":1730343403558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1730343403558,"stop":1730343403558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1730343403558,"stop":1730343403558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"asyncio"},{"name":"parentSuite","value":"tests.agent_trajectory"},{"name":"suite","value":"feed_explore"},{"name":"host","value":"fv-az1766-28"},{"name":"thread","value":"3575-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.agent_trajectory.feed_explore"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["asyncio"]},"source":"364776f269d48ee1.json","parameterValues":[]}