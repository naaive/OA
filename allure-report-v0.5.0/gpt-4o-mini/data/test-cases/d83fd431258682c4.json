{"uid":"d83fd431258682c4","name":"test_query_funding_rate[1-3]","fullName":"tests.agent_trajectory.market_analysis#test_query_funding_rate","historyId":"0f5b515fb11bb26920a586383c74856b","time":{"start":1730355335174,"stop":1730355341220,"duration":6046},"status":"failed","statusMessage":"AssertionError: assert 'DuckDuckGoSearchExecutor' == 'FundingRateExecutor'\n  \n  - FundingRateExecutor\n  + DuckDuckGoSearchExecutor","statusTrace":"market_analysis_agent = AgentExecutor(verbose=True, agent=RunnableMultiActionAgent(runnable=RunnableAssign(mapper={\n  agent_scratchpad: Runnab...(), DuckDuckGoSearchRun(name='DuckDuckGoSearchExecutor'), PriceExecutor(), CoinMarketExecutor(), NFTRankingExecutor()])\n\n    @pytest.mark.asyncio\n    async def test_query_funding_rate(market_analysis_agent):\n        events = market_analysis_agent.astream_events(\n            {\"messages\": [HumanMessage(content=\"What's the funding rate for BTC in binance?\", name=\"human\")]}, version=\"v1\"\n        )\n    \n        tool_end_count = 0\n        async for event in events:\n            if event[\"event\"] == \"on_tool_end\":\n                tool_end_count += 1\n                event_data_input_ = event[\"data\"][\"input\"]\n>               assert event[\"name\"] == \"FundingRateExecutor\"\nE               AssertionError: assert 'DuckDuckGoSearchExecutor' == 'FundingRateExecutor'\nE                 \nE                 - FundingRateExecutor\nE                 + DuckDuckGoSearchExecutor\n\nagent_trajectory/market_analysis.py:62: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1730355328095,"stop":1730355328095,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"market_analysis_agent","time":{"start":1730355328095,"stop":1730355335126,"duration":7031},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1730355335126,"stop":1730355335127,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 'DuckDuckGoSearchExecutor' == 'FundingRateExecutor'\n  \n  - FundingRateExecutor\n  + DuckDuckGoSearchExecutor","statusTrace":"market_analysis_agent = AgentExecutor(verbose=True, agent=RunnableMultiActionAgent(runnable=RunnableAssign(mapper={\n  agent_scratchpad: Runnab...(), DuckDuckGoSearchRun(name='DuckDuckGoSearchExecutor'), PriceExecutor(), CoinMarketExecutor(), NFTRankingExecutor()])\n\n    @pytest.mark.asyncio\n    async def test_query_funding_rate(market_analysis_agent):\n        events = market_analysis_agent.astream_events(\n            {\"messages\": [HumanMessage(content=\"What's the funding rate for BTC in binance?\", name=\"human\")]}, version=\"v1\"\n        )\n    \n        tool_end_count = 0\n        async for event in events:\n            if event[\"event\"] == \"on_tool_end\":\n                tool_end_count += 1\n                event_data_input_ = event[\"data\"][\"input\"]\n>               assert event[\"name\"] == \"FundingRateExecutor\"\nE               AssertionError: assert 'DuckDuckGoSearchExecutor' == 'FundingRateExecutor'\nE                 \nE                 - FundingRateExecutor\nE                 + DuckDuckGoSearchExecutor\n\nagent_trajectory/market_analysis.py:62: AssertionError","steps":[],"attachments":[{"uid":"cc21272968be0273","name":"stdout","source":"cc21272968be0273.txt","type":"text/plain","size":953},{"uid":"36eab618d842d176","name":"stderr","source":"36eab618d842d176.txt","type":"text/plain","size":556}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1730355341227,"stop":1730355341228,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1730355341228,"stop":1730355341228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1730355341228,"stop":1730355341228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1730355341228,"stop":1730355341228,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"asyncio"},{"name":"parentSuite","value":"tests.agent_trajectory"},{"name":"suite","value":"market_analysis"},{"name":"host","value":"fv-az801-114"},{"name":"thread","value":"3799-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.agent_trajectory.market_analysis"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"__pytest_repeat_step_number","value":"0"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["asyncio"]},"source":"d83fd431258682c4.json","parameterValues":["0"]}