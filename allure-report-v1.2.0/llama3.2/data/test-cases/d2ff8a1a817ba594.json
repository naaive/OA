{"uid":"d2ff8a1a817ba594","name":"test_query_coin_market[2-3]","fullName":"tests.agent_trajectory.market_analysis#test_query_coin_market","historyId":"c39236ec69934f1da8d1734b3ba1fb19","time":{"start":1730429125566,"stop":1730429145678,"duration":20112},"status":"failed","statusMessage":"AssertionError: The on_tool_end event did not occur\nassert 0 > 0","statusTrace":"market_analysis_agent = AgentExecutor(verbose=True, agent=RunnableMultiActionAgent(runnable=RunnableAssign(mapper={\n  agent_scratchpad: Runnab...(name='DuckDuckGoSearchExecutor'), FundingRateExecutor(), PriceExecutor(), CoinMarketExecutor(), NFTRankingExecutor()])\n\n    @pytest.mark.asyncio\n    async def test_query_coin_market(market_analysis_agent):\n        events = market_analysis_agent.astream_events(\n            {\"messages\": [HumanMessage(content=\"Give me the market cap for Bitcoin\", name=\"human\")]}, version=\"v1\"\n        )\n    \n        tool_end_count = 0\n        async for event in events:\n            if event[\"event\"] == \"on_tool_end\":\n                tool_end_count += 1\n                event_data_input_ = event[\"data\"][\"input\"]\n                assert event[\"name\"] == \"CoinMarketExecutor\"\n                assert event_data_input_[\"order\"] == \"market_cap_desc\"\n    \n>       assert tool_end_count > 0, \"The on_tool_end event did not occur\"\nE       AssertionError: The on_tool_end event did not occur\nE       assert 0 > 0\n\nagent_trajectory/market_analysis.py:98: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"event_loop_policy","time":{"start":1730429119036,"stop":1730429119036,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"market_analysis_agent","time":{"start":1730429119037,"stop":1730429125564,"duration":6527},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop","time":{"start":1730429125564,"stop":1730429125565,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: The on_tool_end event did not occur\nassert 0 > 0","statusTrace":"market_analysis_agent = AgentExecutor(verbose=True, agent=RunnableMultiActionAgent(runnable=RunnableAssign(mapper={\n  agent_scratchpad: Runnab...(name='DuckDuckGoSearchExecutor'), FundingRateExecutor(), PriceExecutor(), CoinMarketExecutor(), NFTRankingExecutor()])\n\n    @pytest.mark.asyncio\n    async def test_query_coin_market(market_analysis_agent):\n        events = market_analysis_agent.astream_events(\n            {\"messages\": [HumanMessage(content=\"Give me the market cap for Bitcoin\", name=\"human\")]}, version=\"v1\"\n        )\n    \n        tool_end_count = 0\n        async for event in events:\n            if event[\"event\"] == \"on_tool_end\":\n                tool_end_count += 1\n                event_data_input_ = event[\"data\"][\"input\"]\n                assert event[\"name\"] == \"CoinMarketExecutor\"\n                assert event_data_input_[\"order\"] == \"market_cap_desc\"\n    \n>       assert tool_end_count > 0, \"The on_tool_end event did not occur\"\nE       AssertionError: The on_tool_end event did not occur\nE       assert 0 > 0\n\nagent_trajectory/market_analysis.py:98: AssertionError","steps":[],"attachments":[{"uid":"8c1bba25278985cc","name":"stdout","source":"8c1bba25278985cc.txt","type":"text/plain","size":179},{"uid":"a739981489788b7","name":"stderr","source":"a739981489788b7.txt","type":"text/plain","size":125}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"event_loop::3","time":{"start":1730429145684,"stop":1730429145684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_close_event_loop","time":{"start":1730429145684,"stop":1730429145684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_restore_policy","time":{"start":1730429145684,"stop":1730429145684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"event_loop::_provide_clean_event_loop","time":{"start":1730429145684,"stop":1730429145684,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"asyncio"},{"name":"parentSuite","value":"tests.agent_trajectory"},{"name":"suite","value":"market_analysis"},{"name":"host","value":"fv-az1152-915"},{"name":"thread","value":"6057-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.agent_trajectory.market_analysis"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"__pytest_repeat_step_number","value":"1"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["asyncio"]},"source":"d2ff8a1a817ba594.json","parameterValues":["1"]}